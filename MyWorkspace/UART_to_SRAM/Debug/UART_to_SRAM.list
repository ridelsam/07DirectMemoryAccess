
UART_to_SRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e50  08002e50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002e64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002e64  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093bd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018de  00000000  00000000  000293f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205b0  00000000  00000000  0002ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ecf  00000000  00000000  0004c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4bab  00000000  00000000  00055eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011aa9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be4  00000000  00000000  0011aaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e10 	.word	0x08002e10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e10 	.word	0x08002e10

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa54 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f812 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8e4 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8c2 	bl	80006a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f896 	bl	800064c <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000520:	f000 f87a 	bl	8000618 <MX_IWDG_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart2, (uint8_t*)DEST_ADDRESS,100);
 8000524:	2264      	movs	r2, #100	; 0x64
 8000526:	4902      	ldr	r1, [pc, #8]	; (8000530 <main+0x28>)
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <main+0x2c>)
 800052a:	f001 ff5e 	bl	80023ea <HAL_UART_Receive_DMA>
 800052e:	e7f9      	b.n	8000524 <main+0x1c>
 8000530:	20000800 	.word	0x20000800
 8000534:	20000034 	.word	0x20000034

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fc5a 	bl	8002e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <SystemClock_Config+0xd8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a2a      	ldr	r2, [pc, #168]	; (8000610 <SystemClock_Config+0xd8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xd8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xdc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a23      	ldr	r2, [pc, #140]	; (8000614 <SystemClock_Config+0xdc>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <SystemClock_Config+0xdc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000598:	230a      	movs	r3, #10
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fc22 	bl	8001e14 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d6:	f000 f8fb 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f8c2 	bl	8001780 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000602:	f000 f8e5 	bl	80007d0 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_IWDG_Init+0x2c>)
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <MX_IWDG_Init+0x30>)
 8000620:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_IWDG_Init+0x2c>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_IWDG_Init+0x2c>)
 800062a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800062e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_IWDG_Init+0x2c>)
 8000632:	f001 f862 	bl	80016fa <HAL_IWDG_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800063c:	f000 f8c8 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40003000 	.word	0x40003000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fe64 	bl	8002350 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f89f 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000034 	.word	0x20000034
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DMA_Init+0x3c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <MX_DMA_Init+0x3c>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_DMA_Init+0x3c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2010      	movs	r0, #16
 80006c8:	f000 fac3 	bl	8000c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006cc:	2010      	movs	r0, #16
 80006ce:	f000 fadc 	bl	8000c8a <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_GPIO_Init+0xd4>)
 800076c:	f000 ffac 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000776:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xd8>)
 8000788:	f000 fe0a 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fdfc 	bl	80013a0 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(huart);

}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <HAL_MspInit+0x4c>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800081a:	2007      	movs	r0, #7
 800081c:	f000 fa0e 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a30      	ldr	r2, [pc, #192]	; (800090c <HAL_UART_MspInit+0xe0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d159      	bne.n	8000902 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a27      	ldr	r2, [pc, #156]	; (8000910 <HAL_UART_MspInit+0xe4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_UART_MspInit+0xe4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xe8>)
 80008a2:	f000 fd7d 	bl	80013a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008a8:	4a1c      	ldr	r2, [pc, #112]	; (800091c <HAL_UART_MspInit+0xf0>)
 80008aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008e8:	f000 f9ea 	bl	8000cc0 <HAL_DMA_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008f2:	f7ff ff6d 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_UART_MspInit+0xec>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	20000078 	.word	0x20000078
 800091c:	40026088 	.word	0x40026088

08000920 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 f89a 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA1_Stream5_IRQHandler+0x10>)
 8000932:	f000 facb 	bl	8000ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000078 	.word	0x20000078

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffd7 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f002 fa11 	bl	8002db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fdb7 	bl	8000508 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a8:	08002e58 	.word	0x08002e58
  ldr r2, =_sbss
 80009ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b0:	200000dc 	.word	0x200000dc

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f92b 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fef6 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f943 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f90b 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000d8 	.word	0x200000d8

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200000d8 	.word	0x200000d8

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff feda 	bl	8000a84 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e099      	b.n	8000e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2202      	movs	r2, #2
 8000ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0201 	bic.w	r2, r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cfc:	e00f      	b.n	8000d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cfe:	f7ff fec1 	bl	8000a84 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d908      	bls.n	8000d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2220      	movs	r2, #32
 8000d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2203      	movs	r2, #3
 8000d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e078      	b.n	8000e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e8      	bne.n	8000cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <HAL_DMA_Init+0x158>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d107      	bne.n	8000d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4313      	orrs	r3, r2
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f023 0307 	bic.w	r3, r3, #7
 8000d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d117      	bne.n	8000de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00e      	beq.n	8000de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 fa6f 	bl	80012a8 <DMA_CheckFifoParam>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d008      	beq.n	8000de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dde:	2301      	movs	r3, #1
 8000de0:	e016      	b.n	8000e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fa26 	bl	800123c <DMA_CalcBaseAndBitshift>
 8000df0:	4603      	mov	r3, r0
 8000df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df8:	223f      	movs	r2, #63	; 0x3f
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	f010803f 	.word	0xf010803f

08000e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_DMA_Start_IT+0x26>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e040      	b.n	8000ec4 <HAL_DMA_Start_IT+0xa8>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d12f      	bne.n	8000eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2200      	movs	r2, #0
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 f9b8 	bl	80011e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e74:	223f      	movs	r2, #63	; 0x3f
 8000e76:	409a      	lsls	r2, r3
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0216 	orr.w	r2, r2, #22
 8000e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d007      	beq.n	8000ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0208 	orr.w	r2, r2, #8
 8000ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e005      	b.n	8000ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ed8:	4b8e      	ldr	r3, [pc, #568]	; (8001114 <HAL_DMA_IRQHandler+0x248>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a8e      	ldr	r2, [pc, #568]	; (8001118 <HAL_DMA_IRQHandler+0x24c>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0a9b      	lsrs	r3, r3, #10
 8000ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01a      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0204 	bic.w	r2, r2, #4
 8000f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f24:	2208      	movs	r2, #8
 8000f26:	409a      	lsls	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f30:	f043 0201 	orr.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d012      	beq.n	8000f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00b      	beq.n	8000f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f66:	f043 0202 	orr.w	r2, r3, #2
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f72:	2204      	movs	r2, #4
 8000f74:	409a      	lsls	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d012      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	2204      	movs	r2, #4
 8000f92:	409a      	lsls	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9c:	f043 0204 	orr.w	r2, r3, #4
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	2210      	movs	r2, #16
 8000faa:	409a      	lsls	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d043      	beq.n	800103c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d03c      	beq.n	800103c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d018      	beq.n	800100e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d108      	bne.n	8000ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d024      	beq.n	800103c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	4798      	blx	r3
 8000ffa:	e01f      	b.n	800103c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001000:	2b00      	cmp	r3, #0
 8001002:	d01b      	beq.n	800103c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
 800100c:	e016      	b.n	800103c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	2b00      	cmp	r3, #0
 800101a:	d107      	bne.n	800102c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0208 	bic.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	2220      	movs	r2, #32
 8001042:	409a      	lsls	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 808f 	beq.w	800116c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8087 	beq.w	800116c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	2220      	movs	r2, #32
 8001064:	409a      	lsls	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b05      	cmp	r3, #5
 8001074:	d136      	bne.n	80010e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0216 	bic.w	r2, r2, #22
 8001084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	2b00      	cmp	r3, #0
 800109c:	d103      	bne.n	80010a6 <HAL_DMA_IRQHandler+0x1da>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0208 	bic.w	r2, r2, #8
 80010b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	223f      	movs	r2, #63	; 0x3f
 80010bc:	409a      	lsls	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d07e      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	4798      	blx	r3
        }
        return;
 80010e2:	e079      	b.n	80011d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d01d      	beq.n	800112e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10d      	bne.n	800111c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	2b00      	cmp	r3, #0
 8001106:	d031      	beq.n	800116c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
 8001110:	e02c      	b.n	800116c <HAL_DMA_IRQHandler+0x2a0>
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000
 8001118:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001120:	2b00      	cmp	r3, #0
 8001122:	d023      	beq.n	800116c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
 800112c:	e01e      	b.n	800116c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0210 	bic.w	r2, r2, #16
 800114a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001170:	2b00      	cmp	r3, #0
 8001172:	d032      	beq.n	80011da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d022      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2205      	movs	r2, #5
 8001184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3301      	adds	r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d307      	bcc.n	80011b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f2      	bne.n	8001198 <HAL_DMA_IRQHandler+0x2cc>
 80011b2:	e000      	b.n	80011b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	4798      	blx	r3
 80011d6:	e000      	b.n	80011da <HAL_DMA_IRQHandler+0x30e>
        return;
 80011d8:	bf00      	nop
    }
  }
}
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d108      	bne.n	8001220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800121e:	e007      	b.n	8001230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	60da      	str	r2, [r3, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b10      	subs	r3, #16
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <DMA_CalcBaseAndBitshift+0x64>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d909      	bls.n	800127e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001272:	f023 0303 	bic.w	r3, r3, #3
 8001276:	1d1a      	adds	r2, r3, #4
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	659a      	str	r2, [r3, #88]	; 0x58
 800127c:	e007      	b.n	800128e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	aaaaaaab 	.word	0xaaaaaaab
 80012a4:	08002e40 	.word	0x08002e40

080012a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11f      	bne.n	8001302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d856      	bhi.n	8001376 <DMA_CheckFifoParam+0xce>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <DMA_CheckFifoParam+0x28>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	080012f3 	.word	0x080012f3
 80012d8:	080012e1 	.word	0x080012e1
 80012dc:	08001377 	.word	0x08001377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d046      	beq.n	800137a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012f0:	e043      	b.n	800137a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012fa:	d140      	bne.n	800137e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001300:	e03d      	b.n	800137e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800130a:	d121      	bne.n	8001350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d837      	bhi.n	8001382 <DMA_CheckFifoParam+0xda>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <DMA_CheckFifoParam+0x70>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001329 	.word	0x08001329
 800131c:	0800132f 	.word	0x0800132f
 8001320:	08001329 	.word	0x08001329
 8001324:	08001341 	.word	0x08001341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
      break;
 800132c:	e030      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d025      	beq.n	8001386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800133e:	e022      	b.n	8001386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001348:	d11f      	bne.n	800138a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800134e:	e01c      	b.n	800138a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d903      	bls.n	800135e <DMA_CheckFifoParam+0xb6>
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d003      	beq.n	8001364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800135c:	e018      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
      break;
 8001362:	e015      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00e      	beq.n	800138e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
      break;
 8001374:	e00b      	b.n	800138e <DMA_CheckFifoParam+0xe6>
      break;
 8001376:	bf00      	nop
 8001378:	e00a      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      break;
 800137a:	bf00      	nop
 800137c:	e008      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      break;
 800137e:	bf00      	nop
 8001380:	e006      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      break;
 8001382:	bf00      	nop
 8001384:	e004      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      break;
 8001386:	bf00      	nop
 8001388:	e002      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      break;   
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <DMA_CheckFifoParam+0xe8>
      break;
 800138e:	bf00      	nop
    }
  } 
  
  return status; 
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e165      	b.n	8001688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8154 	bne.w	8001682 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80ae 	beq.w	8001682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_GPIO_Init+0x300>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <HAL_GPIO_Init+0x300>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <HAL_GPIO_Init+0x300>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <HAL_GPIO_Init+0x308>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4d      	ldr	r2, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x310>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x314>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_GPIO_Init+0x318>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x20a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_GPIO_Init+0x31c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x206>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_GPIO_Init+0x320>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x202>
 800159e:	2306      	movs	r3, #6
 80015a0:	e00c      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e00a      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_GPIO_Init+0x324>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f ae96 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e034      	b.n	8001776 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001714:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f245 5255 	movw	r2, #21845	; 0x5555
 800171e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6852      	ldr	r2, [r2, #4]
 8001728:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6892      	ldr	r2, [r2, #8]
 8001732:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001734:	f7ff f9a6 	bl	8000a84 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800173a:	e00f      	b.n	800175c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800173c:	f7ff f9a2 	bl	8000a84 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b31      	cmp	r3, #49	; 0x31
 8001748:	d908      	bls.n	800175c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e00c      	b.n	8001776 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e8      	bne.n	800173c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001772:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff f908 	bl	8000a84 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff f904 	bl	8000a84 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f855 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f868 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	08002e28 	.word	0x08002e28
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001968:	f7ff fff0 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08002e38 	.word	0x08002e38

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08002e38 	.word	0x08002e38

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b0ae      	sub	sp, #184	; 0xb8
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019da:	4bcb      	ldr	r3, [pc, #812]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	f200 8206 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x440>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a25 	.word	0x08001a25
 80019f4:	08001df5 	.word	0x08001df5
 80019f8:	08001df5 	.word	0x08001df5
 80019fc:	08001df5 	.word	0x08001df5
 8001a00:	08001a2d 	.word	0x08001a2d
 8001a04:	08001df5 	.word	0x08001df5
 8001a08:	08001df5 	.word	0x08001df5
 8001a0c:	08001df5 	.word	0x08001df5
 8001a10:	08001a35 	.word	0x08001a35
 8001a14:	08001df5 	.word	0x08001df5
 8001a18:	08001df5 	.word	0x08001df5
 8001a1c:	08001df5 	.word	0x08001df5
 8001a20:	08001c25 	.word	0x08001c25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4bb9      	ldr	r3, [pc, #740]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a2a:	e1e7      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2c:	4bb8      	ldr	r3, [pc, #736]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a32:	e1e3      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4bb4      	ldr	r3, [pc, #720]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a40:	4bb1      	ldr	r3, [pc, #708]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d071      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4c:	4bae      	ldr	r3, [pc, #696]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a58:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a72:	4622      	mov	r2, r4
 8001a74:	462b      	mov	r3, r5
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	0159      	lsls	r1, r3, #5
 8001a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a84:	0150      	lsls	r0, r2, #5
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	1a51      	subs	r1, r2, r1
 8001a8e:	6439      	str	r1, [r7, #64]	; 0x40
 8001a90:	4629      	mov	r1, r5
 8001a92:	eb63 0301 	sbc.w	r3, r3, r1
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aae:	4641      	mov	r1, r8
 8001ab0:	018a      	lsls	r2, r1, #6
 8001ab2:	4641      	mov	r1, r8
 8001ab4:	1a51      	subs	r1, r2, r1
 8001ab6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ab8:	4649      	mov	r1, r9
 8001aba:	eb63 0301 	sbc.w	r3, r3, r1
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001acc:	4649      	mov	r1, r9
 8001ace:	00cb      	lsls	r3, r1, #3
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ad6:	4641      	mov	r1, r8
 8001ad8:	00ca      	lsls	r2, r1, #3
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	189b      	adds	r3, r3, r2
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	460a      	mov	r2, r1
 8001aea:	eb42 0303 	adc.w	r3, r2, r3
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001afc:	4629      	mov	r1, r5
 8001afe:	024b      	lsls	r3, r1, #9
 8001b00:	4621      	mov	r1, r4
 8001b02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b06:	4621      	mov	r1, r4
 8001b08:	024a      	lsls	r2, r1, #9
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b20:	f7fe fb70 	bl	8000204 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b2e:	e067      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	2200      	movs	r2, #0
 8001b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b52:	4622      	mov	r2, r4
 8001b54:	462b      	mov	r3, r5
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	0159      	lsls	r1, r3, #5
 8001b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b64:	0150      	lsls	r0, r2, #5
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	1a51      	subs	r1, r2, r1
 8001b6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b70:	4629      	mov	r1, r5
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b84:	4649      	mov	r1, r9
 8001b86:	018b      	lsls	r3, r1, #6
 8001b88:	4641      	mov	r1, r8
 8001b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8e:	4641      	mov	r1, r8
 8001b90:	018a      	lsls	r2, r1, #6
 8001b92:	4641      	mov	r1, r8
 8001b94:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b98:	4649      	mov	r1, r9
 8001b9a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001baa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bb2:	4692      	mov	sl, r2
 8001bb4:	469b      	mov	fp, r3
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	eb1a 0303 	adds.w	r3, sl, r3
 8001bbc:	623b      	str	r3, [r7, #32]
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	028b      	lsls	r3, r1, #10
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bdc:	4621      	mov	r1, r4
 8001bde:	028a      	lsls	r2, r1, #10
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be8:	2200      	movs	r2, #0
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
 8001bec:	677a      	str	r2, [r7, #116]	; 0x74
 8001bee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bf2:	f7fe fb07 	bl	8000204 <__aeabi_uldivmod>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c22:	e0eb      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d06b      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	099b      	lsrs	r3, r3, #6
 8001c42:	2200      	movs	r2, #0
 8001c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c50:	2300      	movs	r3, #0
 8001c52:	667b      	str	r3, [r7, #100]	; 0x64
 8001c54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c58:	4622      	mov	r2, r4
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0159      	lsls	r1, r3, #5
 8001c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6a:	0150      	lsls	r0, r2, #5
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4621      	mov	r1, r4
 8001c72:	1a51      	subs	r1, r2, r1
 8001c74:	61b9      	str	r1, [r7, #24]
 8001c76:	4629      	mov	r1, r5
 8001c78:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c8a:	4659      	mov	r1, fp
 8001c8c:	018b      	lsls	r3, r1, #6
 8001c8e:	4651      	mov	r1, sl
 8001c90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c94:	4651      	mov	r1, sl
 8001c96:	018a      	lsls	r2, r1, #6
 8001c98:	4651      	mov	r1, sl
 8001c9a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c9e:	4659      	mov	r1, fp
 8001ca0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb8:	4690      	mov	r8, r2
 8001cba:	4699      	mov	r9, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	eb18 0303 	adds.w	r3, r8, r3
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	462b      	mov	r3, r5
 8001cc6:	eb49 0303 	adc.w	r3, r9, r3
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cd8:	4629      	mov	r1, r5
 8001cda:	024b      	lsls	r3, r1, #9
 8001cdc:	4621      	mov	r1, r4
 8001cde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	024a      	lsls	r2, r1, #9
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cee:	2200      	movs	r2, #0
 8001cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cf2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cf8:	f7fe fa84 	bl	8000204 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d06:	e065      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x420>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x458>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4611      	mov	r1, r2
 8001d20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d24:	653b      	str	r3, [r7, #80]	; 0x50
 8001d26:	2300      	movs	r3, #0
 8001d28:	657b      	str	r3, [r7, #84]	; 0x54
 8001d2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d2e:	4642      	mov	r2, r8
 8001d30:	464b      	mov	r3, r9
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	0159      	lsls	r1, r3, #5
 8001d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d40:	0150      	lsls	r0, r2, #5
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4641      	mov	r1, r8
 8001d48:	1a51      	subs	r1, r2, r1
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d60:	4659      	mov	r1, fp
 8001d62:	018b      	lsls	r3, r1, #6
 8001d64:	4651      	mov	r1, sl
 8001d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6a:	4651      	mov	r1, sl
 8001d6c:	018a      	lsls	r2, r1, #6
 8001d6e:	4651      	mov	r1, sl
 8001d70:	1a54      	subs	r4, r2, r1
 8001d72:	4659      	mov	r1, fp
 8001d74:	eb63 0501 	sbc.w	r5, r3, r1
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	00eb      	lsls	r3, r5, #3
 8001d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d86:	00e2      	lsls	r2, r4, #3
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	18e3      	adds	r3, r4, r3
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	464b      	mov	r3, r9
 8001d94:	eb45 0303 	adc.w	r3, r5, r3
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da6:	4629      	mov	r1, r5
 8001da8:	028b      	lsls	r3, r1, #10
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db0:	4621      	mov	r1, r4
 8001db2:	028a      	lsls	r2, r1, #10
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dc0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001dc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dc6:	f7fe fa1d 	bl	8000204 <__aeabi_uldivmod>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4613      	mov	r3, r2
 8001dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x458>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0f1b      	lsrs	r3, r3, #28
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001df2:	e003      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	37b8      	adds	r7, #184	; 0xb8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	00f42400 	.word	0x00f42400

08001e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e28d      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8083 	beq.w	8001f3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e34:	4b94      	ldr	r3, [pc, #592]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d019      	beq.n	8001e74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e40:	4b91      	ldr	r3, [pc, #580]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e4c:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e58:	d00c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d112      	bne.n	8001e8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	4b84      	ldr	r3, [pc, #528]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x124>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d157      	bne.n	8001f38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e25a      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d106      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x90>
 8001e96:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7b      	ldr	r2, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xcc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xb4>
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a75      	ldr	r2, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b73      	ldr	r3, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a72      	ldr	r2, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xcc>
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6b      	ldr	r2, [pc, #428]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fdcc 	bl	8000a84 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7fe fdc8 	bl	8000a84 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e21f      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xdc>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe fdb8 	bl	8000a84 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f18:	f7fe fdb4 	bl	8000a84 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e20b      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x104>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06f      	beq.n	8002026 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f46:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d017      	beq.n	8001f82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f52:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d11c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x186>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1d3      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	e03a      	b.n	8002026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x278>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fd61 	bl	8000a84 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fd5d 	bl	8000a84 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1b4      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4925      	ldr	r1, [pc, #148]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e015      	b.n	8002026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x278>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe fd40 	bl	8000a84 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002008:	f7fe fd3c 	bl	8000a84 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e193      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d036      	beq.n	80020a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x27c>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe fd20 	bl	8000a84 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002048:	f7fe fd1c 	bl	8000a84 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e173      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_OscConfig+0x274>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x234>
 8002066:	e01b      	b.n	80020a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_OscConfig+0x27c>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fd09 	bl	8000a84 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	e00e      	b.n	8002094 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe fd05 	bl	8000a84 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d907      	bls.n	8002094 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e15c      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
 8002088:	40023800 	.word	0x40023800
 800208c:	42470000 	.word	0x42470000
 8002090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ea      	bne.n	8002076 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8097 	beq.w	80021dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b83      	ldr	r3, [pc, #524]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b7c      	ldr	r3, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b79      	ldr	r3, [pc, #484]	; (80022c4 <HAL_RCC_OscConfig+0x4b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x4b0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x4b0>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe fcc5 	bl	8000a84 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7fe fcc1 	bl	8000a84 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e118      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x4b0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x31e>
 8002124:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	e01c      	b.n	800216c <HAL_RCC_OscConfig+0x358>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b05      	cmp	r3, #5
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x340>
 800213a:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0x358>
 8002154:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a59      	ldr	r2, [pc, #356]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe fc86 	bl	8000a84 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fc82 	bl	8000a84 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0d7      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0ee      	beq.n	800217c <HAL_RCC_OscConfig+0x368>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fc70 	bl	8000a84 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fc6c 	bl	8000a84 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0c1      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ee      	bne.n	80021a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80ad 	beq.w	8002340 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d060      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d145      	bne.n	8002286 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x4b4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fc40 	bl	8000a84 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fc3c 	bl	8000a84 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e093      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	071b      	lsls	r3, r3, #28
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x4b4>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fc11 	bl	8000a84 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fc0d 	bl	8000a84 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e064      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x452>
 8002284:	e05c      	b.n	8002340 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x4b4>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fbfa 	bl	8000a84 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fbf6 	bl	8000a84 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e04d      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x480>
 80022b2:	e045      	b.n	8002340 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e040      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCC_OscConfig+0x538>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d030      	beq.n	800233c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d129      	bne.n	800233c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d122      	bne.n	800233c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d119      	bne.n	800233c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d10f      	bne.n	800233c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e03f      	b.n	80023e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fa58 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa9b 	bl	80028d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	d11d      	bne.n	8002440 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_UART_Receive_DMA+0x26>
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e016      	b.n	8002442 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_UART_Receive_DMA+0x38>
 800241e:	2302      	movs	r3, #2
 8002420:	e00f      	b.n	8002442 <HAL_UART_Receive_DMA+0x58>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	461a      	mov	r2, r3
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f920 	bl	800267c <UART_Start_Receive_DMA>
 800243c:	4603      	mov	r3, r0
 800243e:	e000      	b.n	8002442 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b09c      	sub	sp, #112	; 0x70
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d172      	bne.n	800258c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	2200      	movs	r2, #0
 80024aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	330c      	adds	r3, #12
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80024cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80024ce:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024d4:	e841 2300 	strex	r3, r2, [r1]
 80024d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3314      	adds	r3, #20
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ea:	e853 3f00 	ldrex	r3, [r3]
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	667b      	str	r3, [r7, #100]	; 0x64
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3314      	adds	r3, #20
 80024fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002500:	647a      	str	r2, [r7, #68]	; 0x44
 8002502:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002508:	e841 2300 	strex	r3, r2, [r1]
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e5      	bne.n	80024e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3314      	adds	r3, #20
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	e853 3f00 	ldrex	r3, [r3]
 8002522:	623b      	str	r3, [r7, #32]
   return(result);
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800252a:	663b      	str	r3, [r7, #96]	; 0x60
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3314      	adds	r3, #20
 8002532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002534:	633a      	str	r2, [r7, #48]	; 0x30
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800253a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e5      	bne.n	8002514 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	2b01      	cmp	r3, #1
 8002556:	d119      	bne.n	800258c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	330c      	adds	r3, #12
 800255e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	e853 3f00 	ldrex	r3, [r3]
 8002566:	60fb      	str	r3, [r7, #12]
   return(result);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0310 	bic.w	r3, r3, #16
 800256e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002578:	61fa      	str	r2, [r7, #28]
 800257a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	69b9      	ldr	r1, [r7, #24]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	e841 2300 	strex	r3, r2, [r1]
 8002584:	617b      	str	r3, [r7, #20]
   return(result);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002596:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002598:	4619      	mov	r1, r3
 800259a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800259c:	f7ff ff69 	bl	8002472 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025a0:	e002      	b.n	80025a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80025a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80025a4:	f7fe f90a 	bl	80007bc <HAL_UART_RxCpltCallback>
}
 80025a8:	bf00      	nop
 80025aa:	3770      	adds	r7, #112	; 0x70
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff ff4e 	bl	8002472 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025d6:	e002      	b.n	80025de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff ff36 	bl	800244a <HAL_UART_RxHalfCpltCallback>
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	2b80      	cmp	r3, #128	; 0x80
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b21      	cmp	r3, #33	; 0x21
 8002618:	d108      	bne.n	800262c <UART_DMAError+0x46>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f000 f8c6 	bl	80027b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b22      	cmp	r3, #34	; 0x22
 800264c:	d108      	bne.n	8002660 <UART_DMAError+0x7a>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2200      	movs	r2, #0
 8002658:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f000 f8d4 	bl	8002808 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	f7ff fef6 	bl	800245e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b098      	sub	sp, #96	; 0x60
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2222      	movs	r2, #34	; 0x22
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	4a40      	ldr	r2, [pc, #256]	; (80027ac <UART_Start_Receive_DMA+0x130>)
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	4a3f      	ldr	r2, [pc, #252]	; (80027b0 <UART_Start_Receive_DMA+0x134>)
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	4a3e      	ldr	r2, [pc, #248]	; (80027b4 <UART_Start_Receive_DMA+0x138>)
 80026ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	2200      	movs	r2, #0
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f7fe fb9e 	bl	8000e1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	65bb      	str	r3, [r7, #88]	; 0x58
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002726:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800272c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800272e:	e841 2300 	strex	r3, r2, [r1]
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e5      	bne.n	8002706 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	657b      	str	r3, [r7, #84]	; 0x54
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800275a:	63ba      	str	r2, [r7, #56]	; 0x38
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e5      	bne.n	800273a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3314      	adds	r3, #20
 8002774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	617b      	str	r3, [r7, #20]
   return(result);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002784:	653b      	str	r3, [r7, #80]	; 0x50
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800278e:	627a      	str	r2, [r7, #36]	; 0x24
 8002790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6a39      	ldr	r1, [r7, #32]
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	61fb      	str	r3, [r7, #28]
   return(result);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3760      	adds	r7, #96	; 0x60
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	0800248b 	.word	0x0800248b
 80027b0:	080025b1 	.word	0x080025b1
 80027b4:	080025e7 	.word	0x080025e7

080027b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	e853 3f00 	ldrex	r3, [r3]
 80027ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	61ba      	str	r2, [r7, #24]
 80027e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	6979      	ldr	r1, [r7, #20]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	e841 2300 	strex	r3, r2, [r1]
 80027ec:	613b      	str	r3, [r7, #16]
   return(result);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e5      	bne.n	80027c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80027fc:	bf00      	nop
 80027fe:	3724      	adds	r7, #36	; 0x24
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002808:	b480      	push	{r7}
 800280a:	b095      	sub	sp, #84	; 0x54
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002830:	643a      	str	r2, [r7, #64]	; 0x40
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e5      	bne.n	8002810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	e853 3f00 	ldrex	r3, [r3]
 8002852:	61fb      	str	r3, [r7, #28]
   return(result);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3314      	adds	r3, #20
 8002862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286c:	e841 2300 	strex	r3, r2, [r1]
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e5      	bne.n	8002844 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	2b01      	cmp	r3, #1
 800287e:	d119      	bne.n	80028b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f023 0310 	bic.w	r3, r3, #16
 8002896:	647b      	str	r3, [r7, #68]	; 0x44
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a0:	61ba      	str	r2, [r7, #24]
 80028a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	613b      	str	r3, [r7, #16]
   return(result);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e5      	bne.n	8002880 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028c2:	bf00      	nop
 80028c4:	3754      	adds	r7, #84	; 0x54
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d4:	b0c0      	sub	sp, #256	; 0x100
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	ea40 0301 	orr.w	r3, r0, r1
 80028f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	431a      	orrs	r2, r3
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	431a      	orrs	r2, r3
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002928:	f021 010c 	bic.w	r1, r1, #12
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002936:	430b      	orrs	r3, r1
 8002938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	6999      	ldr	r1, [r3, #24]
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	ea40 0301 	orr.w	r3, r0, r1
 8002956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b8f      	ldr	r3, [pc, #572]	; (8002b9c <UART_SetConfig+0x2cc>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d005      	beq.n	8002970 <UART_SetConfig+0xa0>
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b8d      	ldr	r3, [pc, #564]	; (8002ba0 <UART_SetConfig+0x2d0>)
 800296c:	429a      	cmp	r2, r3
 800296e:	d104      	bne.n	800297a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff f80c 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8002974:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002978:	e003      	b.n	8002982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800297a:	f7fe fff3 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 800297e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298c:	f040 810c 	bne.w	8002ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800299a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800299e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029a2:	4622      	mov	r2, r4
 80029a4:	462b      	mov	r3, r5
 80029a6:	1891      	adds	r1, r2, r2
 80029a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80029aa:	415b      	adcs	r3, r3
 80029ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029b2:	4621      	mov	r1, r4
 80029b4:	eb12 0801 	adds.w	r8, r2, r1
 80029b8:	4629      	mov	r1, r5
 80029ba:	eb43 0901 	adc.w	r9, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb18 0303 	adds.w	r3, r8, r3
 80029dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029e0:	462b      	mov	r3, r5
 80029e2:	eb49 0303 	adc.w	r3, r9, r3
 80029e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029fe:	460b      	mov	r3, r1
 8002a00:	18db      	adds	r3, r3, r3
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
 8002a04:	4613      	mov	r3, r2
 8002a06:	eb42 0303 	adc.w	r3, r2, r3
 8002a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a14:	f7fd fbf6 	bl	8000204 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <UART_SetConfig+0x2d4>)
 8002a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	011c      	lsls	r4, r3, #4
 8002a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	1891      	adds	r1, r2, r2
 8002a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a40:	415b      	adcs	r3, r3
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a48:	4641      	mov	r1, r8
 8002a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a4e:	4649      	mov	r1, r9
 8002a50:	eb43 0b01 	adc.w	fp, r3, r1
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a68:	4692      	mov	sl, r2
 8002a6a:	469b      	mov	fp, r3
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a76:	464b      	mov	r3, r9
 8002a78:	eb4b 0303 	adc.w	r3, fp, r3
 8002a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a94:	460b      	mov	r3, r1
 8002a96:	18db      	adds	r3, r3, r3
 8002a98:	643b      	str	r3, [r7, #64]	; 0x40
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	eb42 0303 	adc.w	r3, r2, r3
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aaa:	f7fd fbab 	bl	8000204 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2264      	movs	r2, #100	; 0x64
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	1acb      	subs	r3, r1, r3
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <UART_SetConfig+0x2d4>)
 8002acc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ad8:	441c      	add	r4, r3
 8002ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002aec:	4642      	mov	r2, r8
 8002aee:	464b      	mov	r3, r9
 8002af0:	1891      	adds	r1, r2, r2
 8002af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002af4:	415b      	adcs	r3, r3
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002afc:	4641      	mov	r1, r8
 8002afe:	1851      	adds	r1, r2, r1
 8002b00:	6339      	str	r1, [r7, #48]	; 0x30
 8002b02:	4649      	mov	r1, r9
 8002b04:	414b      	adcs	r3, r1
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b14:	4659      	mov	r1, fp
 8002b16:	00cb      	lsls	r3, r1, #3
 8002b18:	4651      	mov	r1, sl
 8002b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b1e:	4651      	mov	r1, sl
 8002b20:	00ca      	lsls	r2, r1, #3
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	4642      	mov	r2, r8
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b30:	464b      	mov	r3, r9
 8002b32:	460a      	mov	r2, r1
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b50:	460b      	mov	r3, r1
 8002b52:	18db      	adds	r3, r3, r3
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b56:	4613      	mov	r3, r2
 8002b58:	eb42 0303 	adc.w	r3, r2, r3
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b66:	f7fd fb4d 	bl	8000204 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <UART_SetConfig+0x2d4>)
 8002b70:	fba3 1302 	umull	r1, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	2164      	movs	r1, #100	; 0x64
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	3332      	adds	r3, #50	; 0x32
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <UART_SetConfig+0x2d4>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	f003 0207 	and.w	r2, r3, #7
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4422      	add	r2, r4
 8002b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b98:	e105      	b.n	8002da6 <UART_SetConfig+0x4d6>
 8002b9a:	bf00      	nop
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	40011400 	.word	0x40011400
 8002ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bba:	4642      	mov	r2, r8
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	1891      	adds	r1, r2, r2
 8002bc0:	6239      	str	r1, [r7, #32]
 8002bc2:	415b      	adcs	r3, r3
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bca:	4641      	mov	r1, r8
 8002bcc:	1854      	adds	r4, r2, r1
 8002bce:	4649      	mov	r1, r9
 8002bd0:	eb43 0501 	adc.w	r5, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	00eb      	lsls	r3, r5, #3
 8002bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be2:	00e2      	lsls	r2, r4, #3
 8002be4:	4614      	mov	r4, r2
 8002be6:	461d      	mov	r5, r3
 8002be8:	4643      	mov	r3, r8
 8002bea:	18e3      	adds	r3, r4, r3
 8002bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	eb45 0303 	adc.w	r3, r5, r3
 8002bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c16:	4629      	mov	r1, r5
 8002c18:	008b      	lsls	r3, r1, #2
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c20:	4621      	mov	r1, r4
 8002c22:	008a      	lsls	r2, r1, #2
 8002c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c28:	f7fd faec 	bl	8000204 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <UART_SetConfig+0x4e4>)
 8002c32:	fba3 2302 	umull	r2, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	011c      	lsls	r4, r3, #4
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	61b9      	str	r1, [r7, #24]
 8002c54:	415b      	adcs	r3, r3
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	6139      	str	r1, [r7, #16]
 8002c62:	4649      	mov	r1, r9
 8002c64:	414b      	adcs	r3, r1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c74:	4659      	mov	r1, fp
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4651      	mov	r1, sl
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c90:	464b      	mov	r3, r9
 8002c92:	460a      	mov	r2, r1
 8002c94:	eb42 0303 	adc.w	r3, r2, r3
 8002c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	008b      	lsls	r3, r1, #2
 8002cb8:	4641      	mov	r1, r8
 8002cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cbe:	4641      	mov	r1, r8
 8002cc0:	008a      	lsls	r2, r1, #2
 8002cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cc6:	f7fd fa9d 	bl	8000204 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <UART_SetConfig+0x4e4>)
 8002cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	2164      	movs	r1, #100	; 0x64
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	3332      	adds	r3, #50	; 0x32
 8002ce2:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <UART_SetConfig+0x4e4>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cee:	441c      	add	r4, r3
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8002cf8:	677a      	str	r2, [r7, #116]	; 0x74
 8002cfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	1891      	adds	r1, r2, r2
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	415b      	adcs	r3, r3
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0e:	4641      	mov	r1, r8
 8002d10:	1851      	adds	r1, r2, r1
 8002d12:	6039      	str	r1, [r7, #0]
 8002d14:	4649      	mov	r1, r9
 8002d16:	414b      	adcs	r3, r1
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d26:	4659      	mov	r1, fp
 8002d28:	00cb      	lsls	r3, r1, #3
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d30:	4651      	mov	r1, sl
 8002d32:	00ca      	lsls	r2, r1, #3
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4642      	mov	r2, r8
 8002d3c:	189b      	adds	r3, r3, r2
 8002d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d40:	464b      	mov	r3, r9
 8002d42:	460a      	mov	r2, r1
 8002d44:	eb42 0303 	adc.w	r3, r2, r3
 8002d48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	663b      	str	r3, [r7, #96]	; 0x60
 8002d54:	667a      	str	r2, [r7, #100]	; 0x64
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d62:	4649      	mov	r1, r9
 8002d64:	008b      	lsls	r3, r1, #2
 8002d66:	4641      	mov	r1, r8
 8002d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	008a      	lsls	r2, r1, #2
 8002d70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d74:	f7fd fa46 	bl	8000204 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <UART_SetConfig+0x4e4>)
 8002d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2164      	movs	r1, #100	; 0x64
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	3332      	adds	r3, #50	; 0x32
 8002d90:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <UART_SetConfig+0x4e4>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4422      	add	r2, r4
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	bf00      	nop
 8002da8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dac:	46bd      	mov	sp, r7
 8002dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db2:	bf00      	nop
 8002db4:	51eb851f 	.word	0x51eb851f

08002db8 <__libc_init_array>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	4d0d      	ldr	r5, [pc, #52]	; (8002df0 <__libc_init_array+0x38>)
 8002dbc:	4c0d      	ldr	r4, [pc, #52]	; (8002df4 <__libc_init_array+0x3c>)
 8002dbe:	1b64      	subs	r4, r4, r5
 8002dc0:	10a4      	asrs	r4, r4, #2
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	42a6      	cmp	r6, r4
 8002dc6:	d109      	bne.n	8002ddc <__libc_init_array+0x24>
 8002dc8:	4d0b      	ldr	r5, [pc, #44]	; (8002df8 <__libc_init_array+0x40>)
 8002dca:	4c0c      	ldr	r4, [pc, #48]	; (8002dfc <__libc_init_array+0x44>)
 8002dcc:	f000 f820 	bl	8002e10 <_init>
 8002dd0:	1b64      	subs	r4, r4, r5
 8002dd2:	10a4      	asrs	r4, r4, #2
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	42a6      	cmp	r6, r4
 8002dd8:	d105      	bne.n	8002de6 <__libc_init_array+0x2e>
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de0:	4798      	blx	r3
 8002de2:	3601      	adds	r6, #1
 8002de4:	e7ee      	b.n	8002dc4 <__libc_init_array+0xc>
 8002de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dea:	4798      	blx	r3
 8002dec:	3601      	adds	r6, #1
 8002dee:	e7f2      	b.n	8002dd6 <__libc_init_array+0x1e>
 8002df0:	08002e50 	.word	0x08002e50
 8002df4:	08002e50 	.word	0x08002e50
 8002df8:	08002e50 	.word	0x08002e50
 8002dfc:	08002e54 	.word	0x08002e54

08002e00 <memset>:
 8002e00:	4402      	add	r2, r0
 8002e02:	4603      	mov	r3, r0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d100      	bne.n	8002e0a <memset+0xa>
 8002e08:	4770      	bx	lr
 8002e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0e:	e7f9      	b.n	8002e04 <memset+0x4>

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
